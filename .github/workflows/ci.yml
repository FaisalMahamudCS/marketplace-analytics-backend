name: CI/CD Pipeline

on:
    push:
        branches: [main, develop]
    pull_request:
        branches: [main]

jobs:
    test:
        runs-on: ubuntu-latest

        services:
            mongodb:
                image: mongo:5.0
                ports:
                    - 27017:27017
                options: >-
                    --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5

        strategy:
            matrix:
                node-version: [18.x, 20.x]

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Node.js ${{ matrix.node-version }}
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ matrix.node-version }}
                  cache: "npm"

            - name: Install dependencies
              run: npm ci

            - name: Run linting
              run: npm run lint

            - name: Run unit tests
              run: npm run test

            - name: Run e2e tests
              run: npm run test:e2e

            - name: Generate test coverage
              run: npm run test:cov

            - name: Upload coverage to Codecov
              uses: codecov/codecov-action@v3
              with:
                  file: ./coverage/lcov.info
                  flags: unittests
                  name: codecov-umbrella
                  fail_ci_if_error: false

    build:
        needs: test
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "20.x"
                  cache: "npm"

            - name: Install dependencies
              run: npm ci

            - name: Build application
              run: npm run build

            - name: Upload build artifacts
              uses: actions/upload-artifact@v3
              with:
                  name: build-files
                  path: dist/

    security:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "20.x"
                  cache: "npm"

            - name: Install dependencies
              run: npm ci

            - name: Run security audit
              run: npm audit --audit-level moderate

            - name: Run Snyk security scan
              uses: snyk/actions/node@master
              env:
                  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
              with:
                  args: --severity-threshold=high

    frontend-test:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "20.x"
                  cache: "npm"

            - name: Install frontend dependencies
              run: |
                  cd frontend
                  npm ci

            - name: Run frontend tests
              run: |
                  cd frontend
                  npm test -- --coverage --watchAll=false

            - name: Build frontend
              run: |
                  cd frontend
                  npm run build

    deploy-staging:
        if: github.ref == 'refs/heads/develop'
        needs: [test, build, security, frontend-test]
        runs-on: ubuntu-latest
        environment: staging

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Download build artifacts
              uses: actions/download-artifact@v3
              with:
                  name: build-files
                  path: dist/

            - name: Deploy to staging
              run: |
                  echo "Deploying to staging environment..."
                  # Add your staging deployment commands here
                  # Example: rsync, docker push, etc.

    deploy-production:
        if: github.ref == 'refs/heads/main'
        needs: [test, build, security, frontend-test]
        runs-on: ubuntu-latest
        environment: production

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Download build artifacts
              uses: actions/download-artifact@v3
              with:
                  name: build-files
                  path: dist/

            - name: Deploy to production
              run: |
                  echo "Deploying to production environment..."
                  # Add your production deployment commands here
                  # Example: rsync, docker push, etc.
